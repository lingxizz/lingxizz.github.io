{"title":"Spring","date":"2020-12-04T09:42:49.854Z","date_formatted":{"ll":"2020年12月4日","L":"2020/12/04","MM-DD":"12-04"},"link":"2020/12/04/Spring","comments":true,"updated":"2020-11-28T02:44:42.072Z","content":"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<p><strong>Table of Contents</strong>  <em>generated with <a href=\"https://github.com/thlorenz/doctoc\" target=\"_blank\">DocToc</a></em></p>\n<ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC\">基本</a>\n<ul>\n<li><a href=\"#classpathxmlapplicationcontext\">ClassPathXmlApplicationContext</a>\n<ul>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E5%99%A8\">构造器</a></li>\n<li><a href=\"#%E8%AE%BE%E7%BD%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84\">设置配置文件路径</a>\n<ul>\n<li><a href=\"#environment%E6%8E%A5%E5%8F%A3\">Environment接口</a>\n<ul>\n<li><a href=\"#profile\">Profile</a></li>\n<li><a href=\"#property\">Property</a></li>\n</ul>\n</li>\n<li><a href=\"#environment%E6%9E%84%E9%80%A0%E5%99%A8\">Environment构造器</a>\n<ul>\n<li><a href=\"#propertysources%E6%8E%A5%E5%8F%A3\">PropertySources接口</a></li>\n<li><a href=\"#propertysource%E6%8E%A5%E5%8F%A3\">PropertySource接口</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%B7%AF%E5%BE%84placeholder%E5%A4%84%E7%90%86\">路径Placeholder处理</a>\n<ul>\n<li><a href=\"#propertyresolver%E6%8E%A5%E5%8F%A3\">PropertyResolver接口</a></li>\n<li><a href=\"#%E8%A7%A3%E6%9E%90\">解析</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#refresh\">refresh</a>\n<ul>\n<li><a href=\"#preparerefresh\">prepareRefresh</a>\n<ul>\n<li><a href=\"#%E5%B1%9E%E6%80%A7%E6%A0%A1%E9%AA%8C\">属性校验</a></li>\n</ul>\n</li>\n<li><a href=\"#beanfactory%E5%88%9B%E5%BB%BA\">BeanFactory创建</a>\n<ul>\n<li><a href=\"#beanfactory%E6%8E%A5%E5%8F%A3\">BeanFactory接口</a></li>\n<li><a href=\"#beanfactory%E5%AE%9A%E5%88%B6\">BeanFactory定制</a></li>\n<li><a href=\"#bean%E5%8A%A0%E8%BD%BD\">Bean加载</a>\n<ul>\n<li><a href=\"#entityresolver\">EntityResolver</a></li>\n<li><a href=\"#beandefinitionreader\">BeanDefinitionReader</a></li>\n<li><a href=\"#%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90ant\">路径解析(Ant)</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD\">配置文件加载</a></li>\n<li><a href=\"#bean%E8%A7%A3%E6%9E%90\">Bean解析</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%BB%98%E8%AE%A4%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90\">默认命名空间解析</a>\n<ul>\n<li><a href=\"#import\">import</a></li>\n<li><a href=\"#alias\">alias</a></li>\n<li><a href=\"#bean\">bean</a>\n<ul>\n<li><a href=\"#id--name%E5%A4%84%E7%90%86\">id &amp; name处理</a></li>\n<li><a href=\"#beanname%E7%94%9F%E6%88%90\">beanName生成</a></li>\n<li><a href=\"#bean%E8%A7%A3%E6%9E%90\">bean解析</a></li>\n<li><a href=\"#bean%E8%A3%85%E9%A5%B0\">Bean装饰</a></li>\n<li><a href=\"#bean%E6%B3%A8%E5%86%8C\">Bean注册</a></li>\n<li><a href=\"#beandefiniton%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\">BeanDefiniton数据结构</a></li>\n</ul>\n</li>\n<li><a href=\"#beans\">beans</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%85%B6%E5%AE%83%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90\">其它命名空间解析</a>\n<ul>\n<li><a href=\"#namespacehandler%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB\">NamespaceHandler继承体系</a></li>\n<li><a href=\"#init\">init</a></li>\n<li><a href=\"#beanfactory%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\">BeanFactory数据结构</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#preparebeanfactory\">prepareBeanFactory</a>\n<ul>\n<li><a href=\"#beanexpressionresolver\">BeanExpressionResolver</a></li>\n<li><a href=\"#propertyeditorregistrar\">PropertyEditorRegistrar</a></li>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E6%B3%A8%E5%85%A5\">环境注入</a></li>\n<li><a href=\"#%E4%BE%9D%E8%B5%96%E8%A7%A3%E6%9E%90%E5%BF%BD%E7%95%A5\">依赖解析忽略</a></li>\n<li><a href=\"#bean%E4%BC%AA%E8%A3%85\">bean伪装</a></li>\n<li><a href=\"#loadtimeweaver\">LoadTimeWeaver</a></li>\n<li><a href=\"#%E6%B3%A8%E5%86%8C%E7%8E%AF%E5%A2%83\">注册环境</a></li>\n</ul>\n</li>\n<li><a href=\"#postprocessbeanfactory\">postProcessBeanFactory</a></li>\n<li><a href=\"#invokebeanfactorypostprocessors\">invokeBeanFactoryPostProcessors</a></li>\n<li><a href=\"#beanpostprocessor%E6%B3%A8%E5%86%8C\">BeanPostProcessor注册</a></li>\n<li><a href=\"#messagesource\">MessageSource</a></li>\n<li><a href=\"#%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8\">事件驱动</a>\n<ul>\n<li><a href=\"#%E4%BA%8B%E4%BB%B6\">事件</a></li>\n<li><a href=\"#%E5%8F%91%E5%B8%83%E8%80%85\">发布者</a>\n<ul>\n<li><a href=\"#applicationeventpublisher\">ApplicationEventPublisher</a></li>\n<li><a href=\"#applicationeventmulticaster\">ApplicationEventMulticaster</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%9B%91%E5%90%AC%E5%99%A8\">监听器</a></li>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\">初始化</a></li>\n<li><a href=\"#%E4%BA%8B%E4%BB%B6%E5%8F%91%E5%B8%83\">事件发布</a>\n<ul>\n<li><a href=\"#%E7%9B%91%E5%90%AC%E5%99%A8%E8%8E%B7%E5%8F%96\">监听器获取</a></li>\n<li><a href=\"#%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5\">同步/异步</a>\n<ul>\n<li><a href=\"#%E5%85%A8%E5%B1%80\">全局</a></li>\n<li><a href=\"#%E6%B3%A8%E8%A7%A3\">注解</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#onrefresh\">onRefresh</a></li>\n<li><a href=\"#applicationlistener%E6%B3%A8%E5%86%8C\">ApplicationListener注册</a></li>\n<li><a href=\"#singleton%E5%88%9D%E5%A7%8B%E5%8C%96\">singleton初始化</a>\n<ul>\n<li><a href=\"#conversionservice\">ConversionService</a></li>\n<li><a href=\"#stringvalueresolver\">StringValueResolver</a></li>\n<li><a href=\"#loadtimeweaveraware\">LoadTimeWeaverAware</a></li>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96-1\">初始化</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#getbean\">getBean</a>\n<ul>\n<li><a href=\"#beanname%E8%BD%AC%E5%8C%96\">beanName转化</a></li>\n<li><a href=\"#%E6%89%8B%E5%8A%A8%E6%B3%A8%E5%86%8Cbean%E6%A3%80%E6%B5%8B\">手动注册bean检测</a></li>\n<li><a href=\"#%E6%A3%80%E6%9F%A5%E7%88%B6%E5%AE%B9%E5%99%A8\">检查父容器</a></li>\n<li><a href=\"#%E4%BE%9D%E8%B5%96%E5%88%9D%E5%A7%8B%E5%8C%96\">依赖初始化</a></li>\n<li><a href=\"#singleton%E5%88%9D%E5%A7%8B%E5%8C%96\">Singleton初始化</a>\n<ul>\n<li><a href=\"#getsingleton%E6%96%B9%E6%B3%95\">getSingleton方法</a>\n<ul>\n<li><a href=\"#%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8\">是否存在</a></li>\n<li><a href=\"#bean%E5%88%9B%E5%BB%BA\">bean创建</a>\n<ul>\n<li><a href=\"#lookup-method%E6%A3%80%E6%B5%8B\">lookup-method检测</a></li>\n<li><a href=\"#instantiationawarebeanpostprocessor%E8%A7%A6%E5%8F%91\">InstantiationAwareBeanPostProcessor触发</a></li>\n<li><a href=\"#docreatebean\">doCreateBean</a>\n<ul>\n<li><a href=\"#%E5%88%9B%E5%BB%BAcreatebeaninstance\">创建(createBeanInstance)</a></li>\n<li><a href=\"#mergedbeandefinitionpostprocessor\">MergedBeanDefinitionPostProcessor</a></li>\n<li><a href=\"#%E5%B1%9E%E6%80%A7%E8%A7%A3%E6%9E%90\">属性解析</a></li>\n<li><a href=\"#%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE\">属性设置</a></li>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96-2\">初始化</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#getobjectforbeaninstance\">getObjectForBeanInstance</a></li>\n</ul>\n</li>\n<li><a href=\"#prototype%E5%88%9D%E5%A7%8B%E5%8C%96\">Prototype初始化</a>\n<ul>\n<li><a href=\"#beforeprototypecreation\">beforePrototypeCreation</a></li>\n<li><a href=\"#createbean\">createBean</a></li>\n<li><a href=\"#afterprototypecreation\">afterPrototypeCreation</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%85%B6%E5%AE%83scope%E5%88%9D%E5%A7%8B%E5%8C%96\">其它Scope初始化</a></li>\n</ul>\n</li>\n</ul>\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<h1 id=\"基本\">基本<a title=\"#基本\" href=\"#基本\"></a></h1>\n<p>本部分从最基本的Spring开始。配置文件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.SimpleBean\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ClassPathXmlApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"config.xml\"</span>);</span><br><span class=\"line\">    SimpleBean bean = context.getBean(SimpleBean<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    bean.send();</span><br><span class=\"line\">    context.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SimpleBean:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">send</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am send method from SimpleBean!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"classpathxmlapplicationcontext\">ClassPathXmlApplicationContext<a title=\"#classpathxmlapplicationcontext\" href=\"#classpathxmlapplicationcontext\"></a></h2>\n<p>整个继承体系如下:</p>\n<p><img src=\"images/ResourceLoader.jpg\" alt=\"ResourceLoader继承体系\" class=\"φcx\"></p>\n<p>ResourceLoader代表了<strong>加载资源的一种方式，正是策略模式的实现</strong>。</p>\n<p>构造器源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClassPathXmlApplicationContext</span><span class=\"params\">(String[] configLocations, <span class=\"keyword\">boolean</span> refresh, ApplicationContext \t         parent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//null</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(parent);</span><br><span class=\"line\">    setConfigLocations(configLocations);</span><br><span class=\"line\">    <span class=\"comment\">//默认true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (refresh) &#123;</span><br><span class=\"line\">        refresh();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造器\">构造器<a title=\"#构造器\" href=\"#构造器\"></a></h3>\n<p>首先看父类构造器，沿着继承体系一直向上调用，直到AbstractApplicationContext:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractApplicationContext</span><span class=\"params\">(ApplicationContext parent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>();</span><br><span class=\"line\">    setParent(parent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractApplicationContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resourcePatternResolver = getResourcePatternResolver();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getResourcePatternResolver:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ResourcePatternResolver <span class=\"title\">getResourcePatternResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PathMatchingResourcePatternResolver支持Ant风格的路径解析。</p>\n<h3 id=\"设置配置文件路径\">设置配置文件路径<a title=\"#设置配置文件路径\" href=\"#设置配置文件路径\"></a></h3>\n<p>即AbstractRefreshableConfigApplicationContext.setConfigLocations:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigLocations</span><span class=\"params\">(String... locations)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (locations != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Assert.noNullElements(locations, <span class=\"string\">\"Config locations must not be null\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.configLocations = <span class=\"keyword\">new</span> String[locations.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; locations.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.configLocations = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>resolvePath:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">resolvePath</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getEnvironment().resolveRequiredPlaceholders(path);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此方法的目的在于将占位符(placeholder)解析成实际的地址。比如可以这么写: <code>new ClassPathXmlApplicationContext(&quot;classpath:config.xml&quot;);</code>那么classpath:就是需要被解析的。</p>\n<p>getEnvironment方法来自于ConfigurableApplicationContext接口，源码很简单，如果为空就调用createEnvironment创建一个。AbstractApplicationContext.createEnvironment:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ConfigurableEnvironment <span class=\"title\">createEnvironment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardEnvironment();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"environment接口\">Environment接口<a title=\"#environment接口\" href=\"#environment接口\"></a></h4>\n<p>继承体系:</p>\n<p><img src=\"images/Environment.jpg\" alt=\"Environment继承体系\" class=\"φcx\"></p>\n<p>Environmen接口**代表了当前应用所处的环境。**从此接口的方法可以看出，其主要和profile、Property相关。</p>\n<h5 id=\"profile\">Profile<a title=\"#profile\" href=\"#profile\"></a></h5>\n<p>Spring Profile特性是从3.1开始的，其主要是为了解决这样一种问题: 线上环境和测试环境使用不同的配置或是数据库或是其它。有了Profile便可以在 不同环境之间无缝切换。**Spring容器管理的所有bean都是和一个profile绑定在一起的。**使用了Profile的配置文件示例:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">profile</span>=<span class=\"string\">\"develop\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath*:jdbc-develop.properties\"</span>/&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">profile</span>=<span class=\"string\">\"production\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath*:jdbc-production.properties\"</span>/&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">profile</span>=<span class=\"string\">\"test\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath*:jdbc-test.properties\"</span>/&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在启动代码中可以用如下代码设置活跃(当前使用的)Profile:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.getEnvironment().setActiveProfiles(<span class=\"string\">\"dev\"</span>);</span><br></pre></td></tr></table></figure>\n<p>当然使用的方式还有很多(比如注解)，参考:</p>\n<p><a href=\"http://radiumxie.iteye.com/blog/1851919\" target=\"_blank\">spring3.1 profile 配置不同的环境</a></p>\n<p><a href=\"http://www.mkyong.com/spring/spring-profiles-example/\" target=\"_blank\">Spring Profiles example</a></p>\n<h5 id=\"property\">Property<a title=\"#property\" href=\"#property\"></a></h5>\n<p>这里的Property指的是程序运行时的一些参数，引用注释:</p>\n<blockquote>\n<blockquote>\n<p>properties files, JVM system properties, system environment variables, JNDI, servlet context parameters, ad-hoc Properties objects,Maps, and so on.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"environment构造器\">Environment构造器<a title=\"#environment构造器\" href=\"#environment构造器\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MutablePropertySources propertySources = <span class=\"keyword\">new</span> MutablePropertySources(<span class=\"keyword\">this</span>.logger);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractEnvironment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    customizePropertySources(<span class=\"keyword\">this</span>.propertySources);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"propertysources接口\">PropertySources接口<a title=\"#propertysources接口\" href=\"#propertysources接口\"></a></h5>\n<p>继承体系:</p>\n<p><img src=\"images/PropertySources.jpg\" alt=\"PropertySources继承体系\" class=\"φcx\"></p>\n<p>此接口实际上是PropertySource的容器，默认的MutablePropertySources实现内部含有一个CopyOnWriteArrayList作为存储载体。</p>\n<p>StandardEnvironment.customizePropertySources:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** System environment property source name: &#123;<span class=\"doctag\">@value</span>&#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME = <span class=\"string\">\"systemEnvironment\"</span>;</span><br><span class=\"line\"><span class=\"comment\">/** JVM system properties property source name: &#123;<span class=\"doctag\">@value</span>&#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME = <span class=\"string\">\"systemProperties\"</span>;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">customizePropertySources</span><span class=\"params\">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> MapPropertySource</span><br><span class=\"line\">        (SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));</span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> SystemEnvironmentPropertySource</span><br><span class=\"line\">        (SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"propertysource接口\">PropertySource接口<a title=\"#propertysource接口\" href=\"#propertysource接口\"></a></h5>\n<p>PropertySource接口代表了键值对的Property来源。继承体系：</p>\n<p><img src=\"images/PropertySource.jpg\" alt=\"PropertySource继承体系\" class=\"φcx\"></p>\n<p>AbstractEnvironment.getSystemProperties:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getSystemProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Map) System.getProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (AccessControlException ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Map) <span class=\"keyword\">new</span> ReadOnlySystemAttributesMap() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getSystemAttribute</span><span class=\"params\">(String attributeName)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> System.getProperty(attributeName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (AccessControlException ex) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">                        logger.info(format(<span class=\"string\">\"Caught AccessControlException when accessing system \"</span> +</span><br><span class=\"line\">                                <span class=\"string\">\"property [%s]; its value will be returned [null]. Reason: %s\"</span>,</span><br><span class=\"line\">                                attributeName, ex.getMessage()));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的实现很有意思，如果安全管理器阻止获取全部的系统属性，那么会尝试获取单个属性的可能性，如果还不行就抛异常了。</p>\n<p>getSystemEnvironment方法也是一个套路，不过最终调用的是System.getenv，可以获取jvm和OS的一些版本信息。</p>\n<h4 id=\"路径placeholder处理\">路径Placeholder处理<a title=\"#路径placeholder处理\" href=\"#路径placeholder处理\"></a></h4>\n<p>AbstractEnvironment.resolveRequiredPlaceholders:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">resolveRequiredPlaceholders</span><span class=\"params\">(String text)</span> <span class=\"keyword\">throws</span> IllegalArgumentException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//text即配置文件路径，比如classpath:config.xml</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.propertyResolver.resolveRequiredPlaceholders(text);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>propertyResolver是一个PropertySourcesPropertyResolver对象:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigurablePropertyResolver propertyResolver =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> PropertySourcesPropertyResolver(<span class=\"keyword\">this</span>.propertySources);</span><br></pre></td></tr></table></figure>\n<h5 id=\"propertyresolver接口\">PropertyResolver接口<a title=\"#propertyresolver接口\" href=\"#propertyresolver接口\"></a></h5>\n<p>PropertyResolver继承体系(排除Environment分支):</p>\n<p><img src=\"images/PropertyResolver.jpg\" alt=\"PropertyResolver继承体系\" class=\"φcx\"></p>\n<p>此接口正是用来解析PropertyResource。</p>\n<h5 id=\"解析\">解析<a title=\"#解析\" href=\"#解析\"></a></h5>\n<p>AbstractPropertyResolver.resolveRequiredPlaceholders:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">resolveRequiredPlaceholders</span><span class=\"params\">(String text)</span> <span class=\"keyword\">throws</span> IllegalArgumentException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.strictHelper == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strictHelper = createPlaceholderHelper(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doResolvePlaceholders(text, <span class=\"keyword\">this</span>.strictHelper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> PropertyPlaceholderHelper <span class=\"title\">createPlaceholderHelper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> ignoreUnresolvablePlaceholders)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//三个参数分别是$&#123;, &#125;, :</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PropertyPlaceholderHelper(<span class=\"keyword\">this</span>.placeholderPrefix, <span class=\"keyword\">this</span>.placeholderSuffix,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.valueSeparator, ignoreUnresolvablePlaceholders);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>doResolvePlaceholders：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">doResolvePlaceholders</span><span class=\"params\">(String text, PropertyPlaceholderHelper helper)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//PlaceholderResolver接口依然是策略模式的体现</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper.replacePlaceholders(text, <span class=\"keyword\">new</span> PropertyPlaceholderHelper.PlaceholderResolver() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">resolvePlaceholder</span><span class=\"params\">(String placeholderName)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getPropertyAsRawString(placeholderName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实代码执行到这里的时候还没有进行xml配置文件的解析，那么这里的解析placeHolder是什么意思呢，原因在于可以这么写:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty(<span class=\"string\">\"spring\"</span>, <span class=\"string\">\"classpath\"</span>);</span><br><span class=\"line\">ClassPathXmlApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"$&#123;spring&#125;:config.xml\"</span>);</span><br><span class=\"line\">SimpleBean bean = context.getBean(SimpleBean<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>这样就可以正确解析。placeholder的替换其实就是字符串操作，这里只说一下正确的属性是怎么来的。实现的关键在于PropertySourcesPropertyResolver.getProperty:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getPropertyAsRawString</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getProperty(key, String<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">false</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProperty</span><span class=\"params\">(String key, Class&lt;T&gt; targetValueType, <span class=\"keyword\">boolean</span> resolveNestedPlaceholders)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.propertySources != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertySource&lt;?&gt; propertySource : <span class=\"keyword\">this</span>.propertySources) &#123;</span><br><span class=\"line\">            Object value = propertySource.getProperty(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很明显了，就是从System.getProperty和System.getenv获取，但是由于环境变量是无法自定义的，所以其实此处只能通过System.setProperty指定。</p>\n<p>注意，classpath:XXX这种写法的classpath前缀到目前为止还没有被处理。</p>\n<h2 id=\"refresh\">refresh<a title=\"#refresh\" href=\"#refresh\"></a></h2>\n<p>Spring bean解析就在此方法，所以单独提出来。</p>\n<p>AbstractApplicationContext.refresh:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Prepare this context for refreshing.</span></span><br><span class=\"line\">        prepareRefresh();</span><br><span class=\"line\">        <span class=\"comment\">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class=\"line\">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class=\"line\">        <span class=\"comment\">// Prepare the bean factory for use in this context.</span></span><br><span class=\"line\">        prepareBeanFactory(beanFactory);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">            postProcessBeanFactory(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">            registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">            initMessageSource();</span><br><span class=\"line\">            <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">            initApplicationEventMulticaster();</span><br><span class=\"line\">            <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">            onRefresh();</span><br><span class=\"line\">            <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">            registerListeners();</span><br><span class=\"line\">            <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">            finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">            finishRefresh();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class=\"line\">            destroyBeans();</span><br><span class=\"line\">            <span class=\"comment\">// Reset 'active' flag.</span></span><br><span class=\"line\">            cancelRefresh(ex);</span><br><span class=\"line\">            <span class=\"comment\">// Propagate exception to caller.</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Reset common introspection caches in Spring's core, since we</span></span><br><span class=\"line\">            <span class=\"comment\">// might not ever need metadata for singleton beans anymore...</span></span><br><span class=\"line\">            resetCommonCaches();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"preparerefresh\">prepareRefresh<a title=\"#preparerefresh\" href=\"#preparerefresh\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareRefresh</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.startupDate = System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.closed.set(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.active.set(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Initialize any placeholder property sources in the context environment</span></span><br><span class=\"line\">    <span class=\"comment\">//空实现</span></span><br><span class=\"line\">    initPropertySources();</span><br><span class=\"line\">    <span class=\"comment\">// Validate that all properties marked as required are resolvable</span></span><br><span class=\"line\">    <span class=\"comment\">// see ConfigurablePropertyResolver#setRequiredProperties</span></span><br><span class=\"line\">    getEnvironment().validateRequiredProperties();</span><br><span class=\"line\">    <span class=\"comment\">// Allow for the collection of early ApplicationEvents,</span></span><br><span class=\"line\">    <span class=\"comment\">// to be published once the multicaster is available...</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.earlyApplicationEvents = <span class=\"keyword\">new</span> LinkedHashSet&lt;ApplicationEvent&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"属性校验\">属性校验<a title=\"#属性校验\" href=\"#属性校验\"></a></h4>\n<p>AbstractEnvironment.validateRequiredProperties:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">validateRequiredProperties</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> MissingRequiredPropertiesException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.propertyResolver.validateRequiredProperties();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AbstractPropertyResolver.validateRequiredProperties:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">validateRequiredProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MissingRequiredPropertiesException ex = <span class=\"keyword\">new</span> MissingRequiredPropertiesException();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String key : <span class=\"keyword\">this</span>.requiredProperties) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getProperty(key) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ex.addMissingRequiredProperty(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ex.getMissingRequiredProperties().isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>requiredProperties是通过setRequiredProperties方法设置的，保存在一个list里面，默认是空的，也就是不需要校验任何属性。</p>\n<h3 id=\"beanfactory创建\">BeanFactory创建<a title=\"#beanfactory创建\" href=\"#beanfactory创建\"></a></h3>\n<p>由obtainFreshBeanFactory调用AbstractRefreshableApplicationContext.refreshBeanFactory:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshBeanFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果已经存在，那么销毁之前的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasBeanFactory()) &#123;</span><br><span class=\"line\">        destroyBeans();</span><br><span class=\"line\">        closeBeanFactory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建了一个DefaultListableBeanFactory对象</span></span><br><span class=\"line\">    DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class=\"line\">    beanFactory.setSerializationId(getId());</span><br><span class=\"line\">    customizeBeanFactory(beanFactory);</span><br><span class=\"line\">    loadBeanDefinitions(beanFactory);</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.beanFactoryMonitor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beanFactory = beanFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"beanfactory接口\">BeanFactory接口<a title=\"#beanfactory接口\" href=\"#beanfactory接口\"></a></h4>\n<p>此接口实际上就是Bean容器，其继承体系:</p>\n<p><img src=\"images/BeanFactory.jpg\" alt=\"BeanFactory继承体系\" class=\"φcx\"></p>\n<h4 id=\"beanfactory定制\">BeanFactory定制<a title=\"#beanfactory定制\" href=\"#beanfactory定制\"></a></h4>\n<p>AbstractRefreshableApplicationContext.customizeBeanFactory方法用于给子类提供一个自由配置的机会，默认实现:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">customizeBeanFactory</span><span class=\"params\">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.allowBeanDefinitionOverriding != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//默认false，不允许覆盖</span></span><br><span class=\"line\">        beanFactory.setAllowBeanDefinitionOverriding(<span class=\"keyword\">this</span>.allowBeanDefinitionOverriding);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.allowCircularReferences != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//默认false，不允许循环引用</span></span><br><span class=\"line\">        beanFactory.setAllowCircularReferences(<span class=\"keyword\">this</span>.allowCircularReferences);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"bean加载\">Bean加载<a title=\"#bean加载\" href=\"#bean加载\"></a></h4>\n<p>AbstractXmlApplicationContext.loadBeanDefinitions，这个便是核心的bean加载了:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></span><br><span class=\"line\">    XmlBeanDefinitionReader beanDefinitionReader = <span class=\"keyword\">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class=\"line\">    <span class=\"comment\">// Configure the bean definition reader with this context's</span></span><br><span class=\"line\">    <span class=\"comment\">// resource loading environment.</span></span><br><span class=\"line\">    beanDefinitionReader.setEnvironment(<span class=\"keyword\">this</span>.getEnvironment());</span><br><span class=\"line\">    beanDefinitionReader.setResourceLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    beanDefinitionReader.setEntityResolver(<span class=\"keyword\">new</span> ResourceEntityResolver(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    <span class=\"comment\">// Allow a subclass to provide custom initialization of the reader,</span></span><br><span class=\"line\">    <span class=\"comment\">// then proceed with actually loading the bean definitions.</span></span><br><span class=\"line\">    <span class=\"comment\">//默认空实现</span></span><br><span class=\"line\">    initBeanDefinitionReader(beanDefinitionReader);</span><br><span class=\"line\">    loadBeanDefinitions(beanDefinitionReader);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"entityresolver\">EntityResolver<a title=\"#entityresolver\" href=\"#entityresolver\"></a></h5>\n<p>此处只说明用到的部分继承体系:</p>\n<p><img src=\"images/EntityResolver.jpg\" alt=\"EntityResolver继承体系\" class=\"φcx\"></p>\n<p>EntityResolver接口在org.xml.sax中定义。DelegatingEntityResolver用于schema和dtd的解析。</p>\n<h5 id=\"beandefinitionreader\">BeanDefinitionReader<a title=\"#beandefinitionreader\" href=\"#beandefinitionreader\"></a></h5>\n<p>继承体系:</p>\n<p><img src=\"images/BeanDefinitionReader.jpg\" alt=\"BeanDefinitionReader继承体系\" class=\"φcx\"></p>\n<h5 id=\"路径解析(ant)\">路径解析(Ant)<a title=\"#路径解析(ant)\" href=\"#路径解析(ant)\"></a></h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(XmlBeanDefinitionReader reader)</span> </span>&#123;</span><br><span class=\"line\">    Resource[] configResources = getConfigResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (configResources != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        reader.loadBeanDefinitions(configResources);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String[] configLocations = getConfigLocations();</span><br><span class=\"line\">    <span class=\"comment\">//here</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (configLocations != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        reader.loadBeanDefinitions(configLocations);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AbstractBeanDefinitionReader.loadBeanDefinitions:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(String... locations)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class=\"line\">    Assert.notNull(locations, <span class=\"string\">\"Location array must not be null\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String location : locations) &#123;</span><br><span class=\"line\">        counter += loadBeanDefinitions(location);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后调用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第二个参数为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(String location, Set&lt;Resource&gt; actualResources)</span> </span>&#123;</span><br><span class=\"line\">    ResourceLoader resourceLoader = getResourceLoader();</span><br><span class=\"line\">    <span class=\"comment\">//参见ResourceLoader类图，ClassPathXmlApplicationContext实现了此接口</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resourceLoader <span class=\"keyword\">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Resource pattern matching available.</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> loadCount = loadBeanDefinitions(resources);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (actualResources != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Resource resource : resources) &#123;</span><br><span class=\"line\">                    actualResources.add(resource);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> loadCount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(</span><br><span class=\"line\">                    <span class=\"string\">\"Could not resolve bean definition resource pattern [\"</span> + location + <span class=\"string\">\"]\"</span>, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Can only load single resources by absolute URL.</span></span><br><span class=\"line\">        Resource resource = resourceLoader.getResource(location);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> loadCount = loadBeanDefinitions(resource);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actualResources != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            actualResources.add(resource);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loadCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getResource的实现在AbstractApplicationContext：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Resource[] getResources(String locationPattern) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造器中初始化，PathMatchingResourcePatternResolver对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.resourcePatternResolver.getResources(locationPattern);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PathMatchingResourcePatternResolver是ResourceLoader继承体系的一部分。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Resource[] getResources(String locationPattern) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    Assert.notNull(locationPattern, <span class=\"string\">\"Location pattern must not be null\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//classpath:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (locationPattern.startsWith(CLASSPATH_ALL_URL_PREFIX)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a class path resource (multiple resources for same name possible)</span></span><br><span class=\"line\">        <span class=\"comment\">//matcher是一个AntPathMatcher对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getPathMatcher().isPattern(locationPattern</span><br><span class=\"line\">            .substring(CLASSPATH_ALL_URL_PREFIX.length()))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// a class path resource pattern</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> findPathMatchingResources(locationPattern);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// all class path resources with the given name</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> findAllClassPathResources(locationPattern</span><br><span class=\"line\">                .substring(CLASSPATH_ALL_URL_PREFIX.length()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Only look for a pattern after a prefix here</span></span><br><span class=\"line\">        <span class=\"comment\">// (to not get fooled by a pattern symbol in a strange prefix).</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> prefixEnd = locationPattern.indexOf(<span class=\"string\">\":\"</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// a file pattern</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> findPathMatchingResources(locationPattern);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// a single resource with the given name</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Resource[] &#123;getResourceLoader().getResource(locationPattern)&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>isPattern:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPattern</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (path.indexOf(<span class=\"string\">'*'</span>) != -<span class=\"number\">1</span> || path.indexOf(<span class=\"string\">'?'</span>) != -<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出配置文件路径是支持ant风格的，也就是可以这么写:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"con*.xml\"</span>);</span><br></pre></td></tr></table></figure>\n<p>具体怎么解析ant风格的就不写了。</p>\n<h5 id=\"配置文件加载\">配置文件加载<a title=\"#配置文件加载\" href=\"#配置文件加载\"></a></h5>\n<p>入口方法在AbstractBeanDefinitionReader的217行:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加载</span></span><br><span class=\"line\">Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class=\"line\"><span class=\"comment\">//解析</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> loadCount = loadBeanDefinitions(resources);</span><br></pre></td></tr></table></figure>\n<p>最终逐个调用XmlBeanDefinitionReader的loadBeanDefinitions方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(Resource resource)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> loadBeanDefinitions(<span class=\"keyword\">new</span> EncodedResource(resource));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Resource是代表一种资源的接口，其类图:</p>\n<p><img src=\"images/Resource.jpg\" alt=\"Resource类图\" class=\"φcx\"></p>\n<p>EncodedResource扮演的其实是一个装饰器的模式，为InputStreamSource添加了字符编码(虽然默认为null)。这样为我们自定义xml配置文件的编码方式提供了机会。</p>\n<p>之后关键的源码只有两行:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(EncodedResource encodedResource)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class=\"line\">    InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class=\"line\">    InputSource inputSource = <span class=\"keyword\">new</span> InputSource(inputStream);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>InputSource是org.xml.sax的类。</p>\n<p>doLoadBeanDefinitions：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">doLoadBeanDefinitions</span><span class=\"params\">(InputSource inputSource, Resource resource)</span> </span>&#123;</span><br><span class=\"line\">    Document doc = doLoadDocument(inputSource, resource);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registerBeanDefinitions(doc, resource);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>doLoadDocument:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Document <span class=\"title\">doLoadDocument</span><span class=\"params\">(InputSource inputSource, Resource resource)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.documentLoader.loadDocument(inputSource, getEntityResolver(), <span class=\"keyword\">this</span>.errorHandler,</span><br><span class=\"line\">        getValidationModeForResource(resource), isNamespaceAware());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>documentLoader是一个DefaultDocumentLoader对象，此类是DocumentLoader接口的唯一实现。getEntityResolver方法返回ResourceEntityResolver，上面说过了。errorHandler是一个SimpleSaxErrorHandler对象。</p>\n<p>校验模型其实就是确定xml文件使用xsd方式还是dtd方式来校验，忘了的话左转度娘。Spring会通过读取xml文件的方式判断应该采用哪种。</p>\n<p>NamespaceAware默认false，因为默认配置了校验为true。</p>\n<p>DefaultDocumentLoader.loadDocument:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Document <span class=\"title\">loadDocument</span><span class=\"params\">(InputSource inputSource, EntityResolver entityResolver,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ErrorHandler errorHandler, <span class=\"keyword\">int</span> validationMode, <span class=\"keyword\">boolean</span> namespaceAware)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里就是老套路了，可以看出，Spring还是使用了dom的方式解析，即一次全部load到内存</span></span><br><span class=\"line\">    DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware);</span><br><span class=\"line\">    DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builder.parse(inputSource);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>createDocumentBuilderFactory比较有意思:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> DocumentBuilderFactory <span class=\"title\">createDocumentBuilderFactory</span><span class=\"params\">(<span class=\"keyword\">int</span> validationMode, <span class=\"keyword\">boolean</span> namespaceAware&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()</span></span>;</span><br><span class=\"line\">    factory.setNamespaceAware(namespaceAware);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (validationMode != XmlValidationModeDetector.VALIDATION_NONE) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//此方法设为true仅对dtd有效，xsd(schema)无效</span></span><br><span class=\"line\">        factory.setValidating(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (validationMode == XmlValidationModeDetector.VALIDATION_XSD) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Enforce namespace aware for XSD...</span></span><br><span class=\"line\">             <span class=\"comment\">//开启xsd(schema)支持</span></span><br><span class=\"line\">            factory.setNamespaceAware(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">             <span class=\"comment\">//这个也是Java支持Schema的套路，可以问度娘</span></span><br><span class=\"line\">            factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> factory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"bean解析\">Bean解析<a title=\"#bean解析\" href=\"#bean解析\"></a></h5>\n<p>XmlBeanDefinitionReader.registerBeanDefinitions:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(Document doc, Resource resource)</span> </span>&#123;</span><br><span class=\"line\">    BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class=\"line\">    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>createBeanDefinitionDocumentReader:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> BeanDefinitionDocumentReader <span class=\"title\">createBeanDefinitionDocumentReader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BeanDefinitionDocumentReader<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">cast</span></span></span><br><span class=\"line\"><span class=\"class\">      //反射</span></span><br><span class=\"line\"><span class=\"class\">      (<span class=\"title\">BeanUtils</span>.<span class=\"title\">instantiateClass</span>(<span class=\"title\">this</span>.<span class=\"title\">documentReaderClass</span>))</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>documentReaderClass默认是DefaultBeanDefinitionDocumentReader，这其实也是策略模式，通过setter方法可以更换其实现。</p>\n<p>注意cast方法，代替了强转。</p>\n<p>createReaderContext：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> XmlReaderContext <span class=\"title\">createReaderContext</span><span class=\"params\">(Resource resource)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XmlReaderContext(resource, <span class=\"keyword\">this</span>.problemReporter, <span class=\"keyword\">this</span>.eventListener,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceExtractor, <span class=\"keyword\">this</span>, getNamespaceHandlerResolver());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>problemReporter是一个FailFastProblemReporter对象。</p>\n<p>eventListener是EmptyReaderEventListener对象，此类里的方法都是空实现。</p>\n<p>sourceExtractor是NullSourceExtractor对象，直接返回空，也是空实现。</p>\n<p>getNamespaceHandlerResolver默认返回DefaultNamespaceHandlerResolver对象，用来获取xsd对应的处理器。</p>\n<p>XmlReaderContext的作用感觉就是这一堆参数的容器，糅合到一起传给DocumentReader，并美其名为Context。可以看出，Spring中到处都是策略模式，大量操作被抽象成接口。</p>\n<p>DefaultBeanDefinitionDocumentReader.registerBeanDefinitions:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.readerContext = readerContext;</span><br><span class=\"line\">    Element root = doc.getDocumentElement();</span><br><span class=\"line\">    doRegisterBeanDefinitions(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>doRegisterBeanDefinitions:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doRegisterBeanDefinitions</span><span class=\"params\">(Element root)</span> </span>&#123;</span><br><span class=\"line\">    BeanDefinitionParserDelegate parent = <span class=\"keyword\">this</span>.delegate;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class=\"line\">    <span class=\"comment\">//默认的命名空间即</span></span><br><span class=\"line\">    <span class=\"comment\">//http://www.springframework.org/schema/beans</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//检查profile属性</span></span><br><span class=\"line\">        String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//profile属性可以以,分割</span></span><br><span class=\"line\">            String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class=\"line\">                    profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    preProcessXml(root);</span><br><span class=\"line\">    parseBeanDefinitions(root, <span class=\"keyword\">this</span>.delegate);</span><br><span class=\"line\">    postProcessXml(root);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delegate = parent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>delegate的作用在于处理beans标签的嵌套，其实Spring配置文件是可以写成这样的:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.SimpleBean\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"java.lang.Object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>xml(schema)的命名空间其实类似于java的报名，命名空间采用URL，比如Spring的是这样:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>xmlns属性就是xml规范定义的用来设置命名空间的。这样设置了之后其实里面的bean元素全名就相当于http://www.springframework.org/schema/beans:bean，可以有效的防止命名冲突。命名空间可以通过规范定义的org.w3c.dom.Node.getNamespaceURI方法获得。</p>\n<p>注意一下profile的检查, AbstractEnvironment.acceptsProfiles:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">acceptsProfiles</span><span class=\"params\">(String... profiles)</span> </span>&#123;</span><br><span class=\"line\">    Assert.notEmpty(profiles, <span class=\"string\">\"Must specify at least one profile\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String profile : profiles) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(profile) &amp;&amp; profile.charAt(<span class=\"number\">0</span>) == <span class=\"string\">'!'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isProfileActive(profile.substring(<span class=\"number\">1</span>))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isProfileActive(profile)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原理很简单，注意从源码可以看出，<strong>profile属性支持!取反</strong>。</p>\n<p>preProcessXml方法是个空实现，供子类去覆盖，<strong>目的在于给子类一个把我们自定义的标签转为Spring标准标签的机会</strong>, 想的真周到。</p>\n<p>DefaultBeanDefinitionDocumentReader.parseBeanDefinitions：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">parseBeanDefinitions</span><span class=\"params\">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class=\"line\">        NodeList nl = root.getChildNodes();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class=\"line\">            Node node = nl.item(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> Element) &#123;</span><br><span class=\"line\">                Element ele = (Element) node;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class=\"line\">                    parseDefaultElement(ele, delegate);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    delegate.parseCustomElement(ele);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        delegate.parseCustomElement(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见，对于非默认命名空间的元素交由delegate处理。</p>\n<h4 id=\"默认命名空间解析\">默认命名空间解析<a title=\"#默认命名空间解析\" href=\"#默认命名空间解析\"></a></h4>\n<p>即import, alias, bean, 嵌套的beans四种元素。parseDefaultElement:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">parseDefaultElement</span><span class=\"params\">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//\"import\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class=\"line\">        importBeanDefinitionResource(ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class=\"line\">        processAliasRegistration(ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class=\"line\">        processBeanDefinition(ele, delegate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// recurse</span></span><br><span class=\"line\">        doRegisterBeanDefinitions(ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"import\">import<a title=\"#import\" href=\"#import\"></a></h5>\n<p>写法示例:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"CTIContext.xml\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"customerContext.xml\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>importBeanDefinitionResource套路和之前的配置文件加载完全一样，不过注意被import进来的文件是先于当前文件 被解析的。</p>\n<h5 id=\"alias\">alias<a title=\"#alias\" href=\"#alias\"></a></h5>\n<p>加入有一个bean名为componentA-dataSource，但是另一个组件想以componentB-dataSource的名字使用，就可以这样定义:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">alias</span> <span class=\"attr\">name</span>=<span class=\"string\">\"componentA-dataSource\"</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"componentB-dataSource\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>processAliasRegistration核心源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">processAliasRegistration</span><span class=\"params\">(Element ele)</span> </span>&#123;</span><br><span class=\"line\">    String name = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class=\"line\">    String alias = ele.getAttribute(ALIAS_ATTRIBUTE);</span><br><span class=\"line\">    getReaderContext().getRegistry().registerAlias(name, alias);</span><br><span class=\"line\">    getReaderContext().fireAliasRegistered(name, alias, extractSource(ele));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从前面的源码可以发现，registry其实就是DefaultListableBeanFactory，它实现了BeanDefinitionRegistry接口。registerAlias方法的实现在SimpleAliasRegistry:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerAlias</span><span class=\"params\">(String name, String alias)</span> </span>&#123;</span><br><span class=\"line\">    Assert.hasText(name, <span class=\"string\">\"'name' must not be empty\"</span>);</span><br><span class=\"line\">    Assert.hasText(alias, <span class=\"string\">\"'alias' must not be empty\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//名字和别名一样</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (alias.equals(name)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//ConcurrentHashMap</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.aliasMap.remove(alias);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        String registeredName = <span class=\"keyword\">this</span>.aliasMap.get(alias);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (registeredName != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (registeredName.equals(name)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// An existing alias - no need to re-register</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!allowAliasOverriding()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException</span><br><span class=\"line\">                    (<span class=\"string\">\"Cannot register alias '\"</span> + alias + <span class=\"string\">\"' for name '\"</span> +</span><br><span class=\"line\">                    name + <span class=\"string\">\"': It is already registered for name '\"</span> + registeredName + <span class=\"string\">\"'.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        checkForAliasCircle(name, alias);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.aliasMap.put(alias, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以别名关系的保存使用Map完成，key为别名，value为本来的名字。</p>\n<h5 id=\"bean\">bean<a title=\"#bean\" href=\"#bean\"></a></h5>\n<p>bean节点是Spring最最常见的节点了。</p>\n<p>DefaultBeanDefinitionDocumentReader.processBeanDefinition:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">processBeanDefinition</span><span class=\"params\">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bdHolder != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Register the final decorated instance.</span></span><br><span class=\"line\">            BeanDefinitionReaderUtils.registerBeanDefinition</span><br><span class=\"line\">                (bdHolder, getReaderContext().getRegistry());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class=\"line\">            getReaderContext().error(<span class=\"string\">\"Failed to register bean definition with name '\"</span> +</span><br><span class=\"line\">                    bdHolder.getBeanName() + <span class=\"string\">\"'\"</span>, ele, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Send registration event.</span></span><br><span class=\"line\">        getReaderContext().fireComponentRegistered(<span class=\"keyword\">new</span> BeanComponentDefinition(bdHolder));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"id-&amp;-name处理\">id &amp; name处理<a title=\"#id-&amp;-name处理\" href=\"#id-&amp;-name处理\"></a></h6>\n<p>最终调用BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element ele, BeanDefinition containingBean)，源码较长，分部分说明。</p>\n<p>首先获取到id和name属性，<strong>name属性支持配置多个，以逗号分隔，如果没有指定id，那么将以第一个name属性值代替。id必须是唯一的，name属性其实是alias的角色，可以和其它的bean重复，如果name也没有配置，那么其实什么也没做</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class=\"line\">String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class=\"line\">List&lt;String&gt; aliases = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//按,分隔</span></span><br><span class=\"line\">    String[] nameArr = StringUtils.tokenizeToStringArray</span><br><span class=\"line\">        (nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class=\"line\">    aliases.addAll(Arrays.asList(nameArr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">String beanName = id;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//name的第一个值作为id</span></span><br><span class=\"line\">    beanName = aliases.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//默认null</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (containingBean == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//校验id是否已重复，如果重复直接抛异常</span></span><br><span class=\"line\">    <span class=\"comment\">//校验是通过内部一个HashSet完成的，出现过的id都会保存进此Set</span></span><br><span class=\"line\">    checkNameUniqueness(beanName, aliases, ele);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"beanname生成\">beanName生成<a title=\"#beanname生成\" href=\"#beanname生成\"></a></h6>\n<p>如果name和id属性都没有指定，那么Spring会自己生成一个, BeanDefinitionParserDelegate.parseBeanDefinitionElement:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanName = <span class=\"keyword\">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class=\"line\">String beanClassName = beanDefinition.getBeanClassName();</span><br><span class=\"line\">aliases.add(beanClassName);</span><br></pre></td></tr></table></figure>\n<p>可见，Spring同时会把类名作为其别名。</p>\n<p>最终调用的是BeanDefinitionReaderUtils.generateBeanName:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">generateBeanName</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BeanDefinition definition, BeanDefinitionRegistry registry, <span class=\"keyword\">boolean</span> isInnerBean)</span> </span>&#123;</span><br><span class=\"line\">    String generatedBeanName = definition.getBeanClassName();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (generatedBeanName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (definition.getParentName() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            generatedBeanName = definition.getParentName() + <span class=\"string\">\"$child\"</span>;</span><br><span class=\"line\">             <span class=\"comment\">//工厂方法产生的bean</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (definition.getFactoryBeanName() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            generatedBeanName = definition.getFactoryBeanName() + <span class=\"string\">\"$created\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String id = generatedBeanName;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInnerBean) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Inner bean: generate identity hashcode suffix.</span></span><br><span class=\"line\">        id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + </span><br><span class=\"line\">            ObjectUtils.getIdentityHexString(definition);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Top-level bean: use plain class name.</span></span><br><span class=\"line\">        <span class=\"comment\">// Increase counter until the id is unique.</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> counter = -<span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"comment\">//用类名#自增的数字命名</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (counter == -<span class=\"number\">1</span> || registry.containsBeanDefinition(id)) &#123;</span><br><span class=\"line\">            counter++;</span><br><span class=\"line\">            id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + counter;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"bean解析-1\">bean解析<a title=\"#bean解析-1\" href=\"#bean解析-1\"></a></h6>\n<p>还是分部分说明(parseBeanDefinitionElement)。</p>\n<p>首先获取到bean的class属性和parent属性，配置了parent之后，当前bean会继承父bean的属性。之后根据class和parent创建BeanDefinition对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String className = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class=\"line\">    className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">String parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class=\"line\">    parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br></pre></td></tr></table></figure>\n<p>BeanDefinition的创建在BeanDefinitionReaderUtils.createBeanDefinition:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AbstractBeanDefinition <span class=\"title\">createBeanDefinition</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String parentName, String className, ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">    GenericBeanDefinition bd = <span class=\"keyword\">new</span> GenericBeanDefinition();</span><br><span class=\"line\">    bd.setParentName(parentName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (className != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (classLoader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            bd.setBeanClass(ClassUtils.forName(className, classLoader));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            bd.setBeanClassName(className);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后是解析bean的其它属性，其实就是读取其配置，调用相应的setter方法保存在BeanDefinition中:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br></pre></td></tr></table></figure>\n<p>之后解析bean的decription子元素:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"b\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"one, two\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.SimpleBean\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>SimpleBean<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>就仅仅是个描述。</p>\n<p>然后是meta子元素的解析，meta元素在xml配置文件里是这样的:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"b\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"one, two\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.SimpleBean\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">key</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"skywalker\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注释上说，这样可以将任意的元数据附到对应的bean definition上。解析过程源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">parseMetaElements</span><span class=\"params\">(Element ele, BeanMetadataAttributeAccessor attributeAccessor)</span> </span>&#123;</span><br><span class=\"line\">    NodeList nl = ele.getChildNodes();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class=\"line\">        Node node = nl.item(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class=\"line\">            Element metaElement = (Element) node;</span><br><span class=\"line\">            String key = metaElement.getAttribute(KEY_ATTRIBUTE);</span><br><span class=\"line\">            String value = metaElement.getAttribute(VALUE_ATTRIBUTE);</span><br><span class=\"line\">             <span class=\"comment\">//就是一个key, value的载体，无他</span></span><br><span class=\"line\">            BeanMetadataAttribute attribute = <span class=\"keyword\">new</span> BeanMetadataAttribute(key, value);</span><br><span class=\"line\">             <span class=\"comment\">//sourceExtractor默认是NullSourceExtractor，返回的是空</span></span><br><span class=\"line\">            attribute.setSource(extractSource(metaElement));</span><br><span class=\"line\">            attributeAccessor.addMetadataAttribute(attribute);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AbstractBeanDefinition继承自BeanMetadataAttributeAccessor类，底层使用了一个LinkedHashMap保存metadata。这个metadata具体是做什么暂时还不知道。</p>\n<p>lookup-method解析：</p>\n<p>此标签的作用在于当一个bean的某个方法被设置为lookup-method后，<strong>每次调用此方法时，都会返回一个新的指定bean的对象</strong>。用法示例:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"apple\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.com.willchen.test.di.Apple\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--水果盘--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fruitPlate\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.com.willchen.test.di.FruitPlate\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">lookup-method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"getFruit\"</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"apple\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>数据保存在Set中，对应的类是MethodOverrides。可以参考:</p>\n<p><a href=\"http://www.cnblogs.com/ViviChan/p/4981619.html\" target=\"_blank\">Spring - lookup-method方式实现依赖注入</a></p>\n<p>replace-mothod解析:</p>\n<p>此标签用于替换bean里面的特定的方法实现，替换者必须实现Spring的MethodReplacer接口，有点像aop的意思。</p>\n<p>配置文件示例:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"replacer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springroad.deomo.chap4.MethodReplace\"</span> /&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springroad.deomo.chap4.LookupMethodBean\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">replaced-method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">replacer</span>=<span class=\"string\">\"replacer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">arg-type</span> <span class=\"attr\">match</span>=<span class=\"string\">\"String\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">replaced-method</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>arg-type的作用是指定替换方法的参数类型，因为接口的定义参数都是Object的。参考: <a href=\"http://blog.csdn.net/lee576/article/details/8725548\" target=\"_blank\">SPRING.NET 1.3.2 学习20–方法注入之替换方法注入</a></p>\n<p>解析之后将数据放在ReplaceOverride对象中，里面有一个LinkedList<String>专门用于保存arg-type。</p>\n<p>构造参数(constructor-arg)解析:</p>\n<p>作用一目了然，使用示例:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.SimpleBean\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>Cat<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>type一般不需要指定，除了泛型集合那种。除此之外，constructor-arg还支持name, index, ref等属性，可以具体的指定参数的位置等。构造参数解析后保存在BeanDefinition内部一个ConstructorArgumentValues对象中。如果设置了index属性，那么以Map&lt;Integer, ValueHolder&gt;的形式保存，反之，以List<ValueHolder>的形式保存。</p>\n<p>property解析:</p>\n<p>非常常用的标签，用以为bean的属性赋值，支持value和ref两种形式，示例:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.SimpleBean\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"skywalker\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>value和ref属性不能同时出现，如果是ref，那么将其值保存在不可变的RuntimeBeanReference对象中，其实现了BeanReference接口，此接口只有一个getBeanName方法。如果是value，那么将其值保存在TypedStringValue对象中。最终将对象保存在BeanDefinition内部一个MutablePropertyValues对象中(内部以ArrayList实现)。</p>\n<p>qualifier解析:</p>\n<p>配置示例:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.Student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"skywalker\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"12\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">qualifier</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.springframework.beans.factory.annotation.Qualifier\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"student\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.Student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"seaswalker\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"15\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">qualifier</span> <span class=\"attr\">value</span>=<span class=\"string\">\"student_2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">qualifier</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.SimpleBean\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>SimpleBean部分源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"student\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> Student student;</span><br></pre></td></tr></table></figure>\n<p>此标签和@Qualifier, @Autowired两个注解一起使用才有作用。@Autowired注解采用按类型查找的方式进行注入，如果找到多个需要类型的bean便会报错，有了@Qualifier标签就可以再按照此注解指定的名称查找。两者结合相当于实现了按类型+名称注入。type属性可以不指定，因为默认就是那个。qualifier标签可以有attribute子元素，比如:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">qualifier</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.springframework.beans.factory.annotation.Qualifier\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attribute</span> <span class=\"attr\">key</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">qualifier</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>貌似是用来在qualifier也区分不开的时候使用。attribute键值对保存在BeanMetadataAttribute对象中。整个qualifier保存在AutowireCandidateQualifier对象中。</p>\n<h6 id=\"bean装饰\">Bean装饰<a title=\"#bean装饰\" href=\"#bean装饰\"></a></h6>\n<p>这部分是针对其它schema的属性以及子节点，比如:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.Student\"</span> <span class=\"attr\">primary</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-override</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>没见过这种用法，留个坑。</p>\n<h6 id=\"bean注册\">Bean注册<a title=\"#bean注册\" href=\"#bean注册\"></a></h6>\n<p>BeanDefinitionReaderUtils.registerBeanDefinition:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinition</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Register bean definition under primary name.</span></span><br><span class=\"line\">    String beanName = definitionHolder.getBeanName();</span><br><span class=\"line\">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class=\"line\">    <span class=\"comment\">// Register aliases for bean name, if any.</span></span><br><span class=\"line\">    String[] aliases = definitionHolder.getAliases();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aliases != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String alias : aliases) &#123;</span><br><span class=\"line\">            registry.registerAlias(beanName, alias);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>registry其实就是DefaultListableBeanFactory对象，registerBeanDefinition方法主要就干了这么两件事:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinition</span><span class=\"params\">(String beanName, BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.beanDefinitionNames.add(beanName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个是Map，另一个是List，一目了然。registerAlias方法的实现在其父类SimpleAliasRegistry，就是把键值对放在了一个ConcurrentHashMap里。</p>\n<p>ComponentRegistered事件触发:</p>\n<p>默认是个空实现，前面说过了。</p>\n<h6 id=\"beandefiniton数据结构\">BeanDefiniton数据结构<a title=\"#beandefiniton数据结构\" href=\"#beandefiniton数据结构\"></a></h6>\n<p>BeanDefiniton数据结构如下图:</p>\n<p><img src=\"images/BeanDefinition.jpg\" alt=\"BeanDefinition数据结构\" class=\"φcx\"></p>\n<h5 id=\"beans\">beans<a title=\"#beans\" href=\"#beans\"></a></h5>\n<p>beans元素的嵌套直接递归调用DefaultBeanDefinitionDocumentReader.parseBeanDefinitions。</p>\n<h4 id=\"其它命名空间解析\">其它命名空间解析<a title=\"#其它命名空间解析\" href=\"#其它命名空间解析\"></a></h4>\n<p>入口在DefaultBeanDefinitionDocumentReader.parseBeanDefinitions-&gt;BeanDefinitionParserDelegate.parseCustomElement(第二个参数为空):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BeanDefinition <span class=\"title\">parseCustomElement</span><span class=\"params\">(Element ele, BeanDefinition containingBd)</span> </span>&#123;</span><br><span class=\"line\">    String namespaceUri = getNamespaceURI(ele);</span><br><span class=\"line\">    NamespaceHandler handler = <span class=\"keyword\">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> handler.parse(ele, <span class=\"keyword\">new</span> ParserContext(<span class=\"keyword\">this</span>.readerContext, <span class=\"keyword\">this</span>, containingBd));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NamespaceHandlerResolver由XmlBeanDefinitionReader初始化，是一个DefaultNamespaceHandlerResolver对象，也是NamespaceHandlerResolver接口的唯一实现。</p>\n<p>其resolve方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> NamespaceHandler <span class=\"title\">resolve</span><span class=\"params\">(String namespaceUri)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;String, Object&gt; handlerMappings = getHandlerMappings();</span><br><span class=\"line\">    Object handlerOrClassName = handlerMappings.get(namespaceUri);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handlerOrClassName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (handlerOrClassName <span class=\"keyword\">instanceof</span> NamespaceHandler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (NamespaceHandler) handlerOrClassName;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        String className = (String) handlerOrClassName;</span><br><span class=\"line\">        Class&lt;?&gt; handlerClass = ClassUtils.forName(className, <span class=\"keyword\">this</span>.classLoader);</span><br><span class=\"line\">        NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);</span><br><span class=\"line\">        namespaceHandler.init();</span><br><span class=\"line\">        handlerMappings.put(namespaceUri, namespaceHandler);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> namespaceHandler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>容易看出，Spring其实使用了一个Map了保存其映射关系，key就是命名空间的uri，value是<strong>NamespaceHandler对象或是Class完整名，如果发现是类名，那么用反射的方法进行初始化，如果是NamespaceHandler对象，那么直接返回</strong>。</p>\n<p>NamespaceHandler映射关系来自于各个Spring jar包下的META-INF/spring.handlers文件，以spring-context包为例:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http\\://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler</span><br><span class=\"line\">http\\://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler</span><br><span class=\"line\">http\\://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler</span><br><span class=\"line\">http\\://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler</span><br><span class=\"line\">http\\://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler</span><br></pre></td></tr></table></figure>\n<h5 id=\"namespacehandler继承体系\">NamespaceHandler继承体系<a title=\"#namespacehandler继承体系\" href=\"#namespacehandler继承体系\"></a></h5>\n<p><img src=\"images/NamespaceHandler.jpg\" alt=\"NamespaceHandler继承体系\" class=\"φcx\"></p>\n<h5 id=\"init\">init<a title=\"#init\" href=\"#init\"></a></h5>\n<p>resolve中调用了其init方法，此方法用以向NamespaceHandler对象注册BeanDefinitionParser对象。<strong>此接口用以解析顶层(beans下)的非默认命名空间元素，比如<code>&lt;context:annotation-config /&gt;</code></strong>。</p>\n<p>所以这样逻辑就很容易理解了: <strong>每种子标签的解析仍是策略模式的体现，init负责向父类NamespaceHandlerSupport注册不同的策略，由父类的NamespaceHandlerSupport.parse方法根据具体的子标签调用相应的策略完成解析的过程</strong>。</p>\n<p>此部分较为重要，所以重新开始大纲。</p>\n<h5 id=\"beanfactory数据结构\">BeanFactory数据结构<a title=\"#beanfactory数据结构\" href=\"#beanfactory数据结构\"></a></h5>\n<p>BeanDefinition在BeanFactory中的主要数据结构如下图:</p>\n<p><img src=\"images/Beanfactory_structure.jpg\" alt=\"Beanfactory数据结构\" class=\"φcx\"></p>\n<h3 id=\"preparebeanfactory\">prepareBeanFactory<a title=\"#preparebeanfactory\" href=\"#preparebeanfactory\"></a></h3>\n<p>此方法负责对BeanFactory进行一些特征的设置工作，&quot;特征&quot;包含这么几个方面:</p>\n<h4 id=\"beanexpressionresolver\">BeanExpressionResolver<a title=\"#beanexpressionresolver\" href=\"#beanexpressionresolver\"></a></h4>\n<p>此接口只有一个实现: StandardBeanExpressionResolver。接口只含有一个方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object <span class=\"title\">evaluate</span><span class=\"params\">(String value, BeanExpressionContext evalContext)</span></span></span><br></pre></td></tr></table></figure>\n<p>prepareBeanFactory将一个此对象放入BeanFactory:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.setBeanExpressionResolver(<span class=\"keyword\">new</span> \t\t\t\t\t\t \t\t\tStandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br></pre></td></tr></table></figure>\n<p>StandardBeanExpressionResolver对象内部有一个关键的成员: SpelExpressionParser,其整个类图:</p>\n<p><img src=\"images/ExpressionParser.jpg\" alt=\"ExpressionParser继承体系\" class=\"φcx\"></p>\n<p>这便是Spring3.0开始出现的Spel表达式的解释器。</p>\n<h4 id=\"propertyeditorregistrar\">PropertyEditorRegistrar<a title=\"#propertyeditorregistrar\" href=\"#propertyeditorregistrar\"></a></h4>\n<p>此接口用于向Spring注册java.beans.PropertyEditor，只有一个方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerCustomEditors(PropertyEditorRegistry registry)</span><br></pre></td></tr></table></figure>\n<p>实现也只有一个: ResourceEditorRegistrar。</p>\n<p>在编写xml配置时，我们设置的值都是字符串形式，所以在使用时肯定需要转为我们需要的类型，PropertyEditor接口正是定义了这么个东西。</p>\n<p>prepareBeanFactory:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addPropertyEditorRegistrar(<span class=\"keyword\">new</span> ResourceEditorRegistrar(<span class=\"keyword\">this</span>, getEnvironment()));</span><br></pre></td></tr></table></figure>\n<p>BeanFactory也暴露了registerCustomEditors方法用以添加自定义的转换器，所以这个地方是组合模式的体现。</p>\n<p>我们有两种方式可以添加自定义PropertyEditor:</p>\n<ul>\n<li>\n<p>通过<code>context.getBeanFactory().registerCustomEditor</code></p>\n</li>\n<li>\n<p>通过Spring配置文件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.config.CustomEditorConfigurer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"customEditors\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"base.Cat\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"base.CatEditor\"</span> /&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参考: <a href=\"http://blog.csdn.net/zhoudaxia/article/details/36247883\" target=\"_blank\">深入理解JavaBean(2)：属性编辑器PropertyEditor</a></p>\n<h4 id=\"环境注入\">环境注入<a title=\"#环境注入\" href=\"#环境注入\"></a></h4>\n<p>在Spring中我们自己的bean可以通过实现EnvironmentAware等一系列Aware接口获取到Spring内部的一些对象。prepareBeanFactory:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> ApplicationContextAwareProcessor(<span class=\"keyword\">this</span>));</span><br></pre></td></tr></table></figure>\n<p>ApplicationContextAwareProcessor核心的invokeAwareInterfaces方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAwareInterfaces</span><span class=\"params\">(Object bean)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> Aware) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> EnvironmentAware) &#123;</span><br><span class=\"line\">            ((EnvironmentAware) bean).setEnvironment(<span class=\"keyword\">this</span>.applicationContext.getEnvironment());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> EmbeddedValueResolverAware) &#123;</span><br><span class=\"line\">            ((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(<span class=\"keyword\">this</span>.embeddedValueResolver);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"依赖解析忽略\">依赖解析忽略<a title=\"#依赖解析忽略\" href=\"#依赖解析忽略\"></a></h4>\n<p>此部分设置哪些接口在进行依赖注入的时候应该被忽略:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.ignoreDependencyInterface(ResourceLoaderAware<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(MessageSourceAware<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(ApplicationContextAware<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(EnvironmentAware<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"bean伪装\">bean伪装<a title=\"#bean伪装\" href=\"#bean伪装\"></a></h4>\n<p>有些对象并不在BeanFactory中，但是我们依然想让它们可以被装配，这就需要伪装一下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.registerResolvableDependency(BeanFactory<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">beanFactory</span>)</span>;</span><br><span class=\"line\">beanFactory.registerResolvableDependency(ResourceLoader<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">this</span>)</span>;</span><br><span class=\"line\">beanFactory.registerResolvableDependency(ApplicationEventPublisher<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">this</span>)</span>;</span><br><span class=\"line\">beanFactory.registerResolvableDependency(ApplicationContext<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">this</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>伪装关系保存在一个Map&lt;Class&lt;?&gt;, Object&gt;里。</p>\n<h4 id=\"loadtimeweaver\">LoadTimeWeaver<a title=\"#loadtimeweaver\" href=\"#loadtimeweaver\"></a></h4>\n<p>如果配置了此bean，那么：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class=\"line\">    beanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class=\"line\">    <span class=\"comment\">// Set a temporary ClassLoader for type matching.</span></span><br><span class=\"line\">    beanFactory.setTempClassLoader(<span class=\"keyword\">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个东西具体是干什么的在后面context:load-time-weaver中说明。</p>\n<h4 id=\"注册环境\">注册环境<a title=\"#注册环境\" href=\"#注册环境\"></a></h4>\n<p>源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class=\"line\">    beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class=\"line\">    beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class=\"line\">    beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().</span><br><span class=\"line\">        getSystemEnvironment());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>containsLocalBean特殊之处在于不会去父BeanFactory寻找。</p>\n<h3 id=\"postprocessbeanfactory\">postProcessBeanFactory<a title=\"#postprocessbeanfactory\" href=\"#postprocessbeanfactory\"></a></h3>\n<p>此方法允许子类在所有的bean尚未初始化之前注册BeanPostProcessor。空实现且没有子类覆盖。</p>\n<h3 id=\"invokebeanfactorypostprocessors\">invokeBeanFactoryPostProcessors<a title=\"#invokebeanfactorypostprocessors\" href=\"#invokebeanfactorypostprocessors\"></a></h3>\n<p>BeanFactoryPostProcessor接口允许我们在bean正是初始化之前改变其值。此接口只有一个方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>有两种方式可以向Spring添加此对象:</p>\n<ul>\n<li>\n<p>通过代码的方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.addBeanFactoryPostProcessor</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>通过xml配置的方式:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.SimpleBeanFactoryPostProcessor\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>注意此时尚未进行bean的初始化工作，初始化是在后面的finishBeanFactoryInitialization进行的，所以在BeanFactoryPostProcessor对象中获取bean会导致提前初始化。</p>\n<p>此方法的关键源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeBeanFactoryPostProcessors</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class=\"line\">    PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory,</span><br><span class=\"line\">        getBeanFactoryPostProcessors());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getBeanFactoryPostProcessors获取的就是AbstractApplicationContext的成员beanFactoryPostProcessors(ArrayList)，但是很有意思，<strong>只有通过context.addBeanFactoryPostProcessor这种方式添加的才会出现在这个List里，所以对于xml配置方式，此List其实没有任何元素。玄机就在PostProcessorRegistrationDelegate里</strong>。</p>\n<p>核心思想就是使用BeanFactory的getBeanNamesForType方法获取相应的BeanDefinition的name数组，之后逐一调用getBean方法获取到bean(初始化)，getBean方法后面再说。</p>\n<p>注意此处有一个优先级的概念，如果你的BeanFactoryPostProcessor同时实现了Ordered或者是PriorityOrdered接口，那么会被首先执行。</p>\n<h3 id=\"beanpostprocessor注册\">BeanPostProcessor注册<a title=\"#beanpostprocessor注册\" href=\"#beanpostprocessor注册\"></a></h3>\n<p>此部分实质上是在BeanDefinitions中寻找BeanPostProcessor，之后调用BeanFactory.addBeanPostProcessor方法保存在一个List中，注意添加时仍然有优先级的概念，优先级高的在前面。</p>\n<h3 id=\"messagesource\">MessageSource<a title=\"#messagesource\" href=\"#messagesource\"></a></h3>\n<p>此接口用以支持Spring国际化。继承体系如下:</p>\n<p><img src=\"images/MessageSource.jpg\" alt=\"MessageSource继承体系\" class=\"φcx\"></p>\n<p>AbstractApplicationContext的initMessageSource()方法就是在BeanFactory中查找MessageSource的bean，如果配置了此bean，那么调用getBean方法完成其初始化并将其保存在AbstractApplicationContext内部messageSource成员变量中，用以处理ApplicationContext的getMessage调用，因为从继承体系上来看，ApplicationContext是MessageSource的子类，此处是委托模式的体现。如果没有配置此bean，那么初始化一个DelegatingMessageSource对象，此类是一个空实现，同样用以处理getMessage调用请求。</p>\n<p>参考: <a href=\"http://stamen.iteye.com/blog/1541732\" target=\"_blank\">学习Spring必学的Java基础知识(8)----国际化信息</a></p>\n<h3 id=\"事件驱动\">事件驱动<a title=\"#事件驱动\" href=\"#事件驱动\"></a></h3>\n<p>此接口代表了Spring的事件驱动(监听器)模式。一个事件驱动包含三部分:</p>\n<h4 id=\"事件\">事件<a title=\"#事件\" href=\"#事件\"></a></h4>\n<p>java的所有事件对象一般都是java.util.EventObject的子类，Spring的整个继承体系如下:</p>\n<p><img src=\"images/EventObject.jpg\" alt=\"EventObject继承体系\" class=\"φcx\"></p>\n<h4 id=\"发布者\">发布者<a title=\"#发布者\" href=\"#发布者\"></a></h4>\n<h5 id=\"applicationeventpublisher\">ApplicationEventPublisher<a title=\"#applicationeventpublisher\" href=\"#applicationeventpublisher\"></a></h5>\n<p><img src=\"images/ApplicationEventPublisher.jpg\" alt=\"ApplicationEventPublisher继承体系\" class=\"φcx\"></p>\n<p>一目了然。</p>\n<h5 id=\"applicationeventmulticaster\">ApplicationEventMulticaster<a title=\"#applicationeventmulticaster\" href=\"#applicationeventmulticaster\"></a></h5>\n<p>ApplicationEventPublisher实际上正是将请求委托给ApplicationEventMulticaster来实现的。其继承体系:</p>\n<p><img src=\"images/ApplicationEventMulticaster.jpg\" alt=\"ApplicationEventMulticaster继承体系\" class=\"φcx\"></p>\n<h4 id=\"监听器\">监听器<a title=\"#监听器\" href=\"#监听器\"></a></h4>\n<p>所有的监听器是jdk EventListener的子类，这是一个mark接口。继承体系:</p>\n<p><img src=\"images/EventListener.jpg\" alt=\"EventListener继承体系\" class=\"φcx\"></p>\n<p>可以看出SmartApplicationListener和GenericApplicationListener是高度相似的，都提供了事件类型检测和顺序机制，而后者是从Spring4.2加入的，Spring官方文档推荐使用后者代替前者。</p>\n<h4 id=\"初始化\">初始化<a title=\"#初始化\" href=\"#初始化\"></a></h4>\n<p>前面说过ApplicationEventPublisher是通过委托给ApplicationEventMulticaster实现的，所以refresh方法中完成的是对ApplicationEventMulticaster的初始化:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">initApplicationEventMulticaster();</span><br></pre></td></tr></table></figure>\n<p>initApplicationEventMulticaster则首先在BeanFactory中寻找ApplicationEventMulticaster的bean，如果找到，那么调用getBean方法将其初始化，如果找不到那么使用SimpleApplicationEventMulticaster。</p>\n<h4 id=\"事件发布\">事件发布<a title=\"#事件发布\" href=\"#事件发布\"></a></h4>\n<p>AbstractApplicationContext.publishEvent核心代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">publishEvent</span><span class=\"params\">(Object event, ResolvableType eventType)</span> </span>&#123;</span><br><span class=\"line\">    getApplicationEventMulticaster().multicastEvent(applicationEvent, eventType);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SimpleApplicationEventMulticaster.multicastEvent:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">multicastEvent</span><span class=\"params\">(<span class=\"keyword\">final</span> ApplicationEvent event, ResolvableType eventType)</span> </span>&#123;</span><br><span class=\"line\">    ResolvableType type = (eventType != <span class=\"keyword\">null</span> ? eventType : resolveDefaultEventType(event));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class=\"line\">        Executor executor = getTaskExecutor();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            executor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    invokeListener(listener, event);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            invokeListener(listener, event);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"监听器获取\">监听器获取<a title=\"#监听器获取\" href=\"#监听器获取\"></a></h5>\n<p>获取当然还是通过beanFactory的getBean来完成的，值得注意的是Spring在此处使用了缓存(ConcurrentHashMap)来加速查找的过程。</p>\n<h5 id=\"同步/异步\">同步/异步<a title=\"#同步/异步\" href=\"#同步/异步\"></a></h5>\n<p>可以看出，如果executor不为空，那么监听器的执行实际上是异步的。那么如何配置同步/异步呢?</p>\n<h6 id=\"全局\">全局<a title=\"#全局\" href=\"#全局\"></a></h6>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">task:executor</span> <span class=\"attr\">id</span>=<span class=\"string\">\"multicasterExecutor\"</span> <span class=\"attr\">pool-size</span>=<span class=\"string\">\"3\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.context.event.SimpleApplicationEventMulticaster\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"taskExecutor\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"multicasterExecutor\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>task schema是Spring从3.0开始加入的，使我们可以不再依赖于Quartz实现定时任务，源码在org.springframework.core.task包下，使用需要引入schema：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:task=\"http://www.springframework.org/schema/task\"</span><br><span class=\"line\">xsi:schemaLocation=\"http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd\"</span><br></pre></td></tr></table></figure>\n<p>可以参考: <a href=\"http://gong1208.iteye.com/blog/1773177\" target=\"_blank\">Spring定时任务的几种实现</a></p>\n<h6 id=\"注解\">注解<a title=\"#注解\" href=\"#注解\"></a></h6>\n<p>开启注解支持:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 开启@AspectJ AOP代理 --&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>/&gt;</span>  </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 任务调度器 --&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">task:scheduler</span> <span class=\"attr\">id</span>=<span class=\"string\">\"scheduler\"</span> <span class=\"attr\">pool-size</span>=<span class=\"string\">\"10\"</span>/&gt;</span>  </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 任务执行器 --&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">task:executor</span> <span class=\"attr\">id</span>=<span class=\"string\">\"executor\"</span> <span class=\"attr\">pool-size</span>=<span class=\"string\">\"10\"</span>/&gt;</span>  </span><br><span class=\"line\"><span class=\"comment\">&lt;!--开启注解调度支持 @Async @Scheduled--&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">task:annotation-driven</span> <span class=\"attr\">executor</span>=<span class=\"string\">\"executor\"</span> <span class=\"attr\">scheduler</span>=<span class=\"string\">\"scheduler\"</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在代码中使用示例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailRegisterListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">RegisterEvent</span>&gt; </span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Async</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(<span class=\"keyword\">final</span> RegisterEvent event)</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"注册成功，发送确认邮件给：\"</span> + ((User)event.getSource()).getUsername());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考: <a href=\"http://jinnianshilongnian.iteye.com/blog/1902886\" target=\"_blank\">详解Spring事件驱动模型</a></p>\n<h3 id=\"onrefresh\">onRefresh<a title=\"#onrefresh\" href=\"#onrefresh\"></a></h3>\n<p>这又是一个模版方法，允许子类在进行bean初始化之前进行一些定制操作。默认空实现。</p>\n<h3 id=\"applicationlistener注册\">ApplicationListener注册<a title=\"#applicationlistener注册\" href=\"#applicationlistener注册\"></a></h3>\n<p>registerListeners方法干的，没什么好说的。</p>\n<h3 id=\"singleton初始化\">singleton初始化<a title=\"#singleton初始化\" href=\"#singleton初始化\"></a></h3>\n<p>finishBeanFactoryInitialization：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finishBeanFactoryInitialization</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class=\"line\">            beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">        beanFactory.setConversionService(</span><br><span class=\"line\">                beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService<span class=\"class\">.<span class=\"keyword\">class</span>))</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class=\"line\">        beanFactory.addEmbeddedValueResolver(<span class=\"keyword\">new</span> StringValueResolver() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">resolveStringValue</span><span class=\"params\">(String strVal)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> getEnvironment().resolvePlaceholders(strVal);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String[] weaverAwareNames = beanFactory.getBeanNamesForType</span><br><span class=\"line\">        (LoadTimeWeaverAware<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">false</span>, <span class=\"title\">false</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class=\"line\">        getBean(weaverAwareName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class=\"line\">    beanFactory.freezeConfiguration();</span><br><span class=\"line\">    <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">    beanFactory.preInstantiateSingletons();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分部分说明。</p>\n<h4 id=\"conversionservice\">ConversionService<a title=\"#conversionservice\" href=\"#conversionservice\"></a></h4>\n<p>此接口用于类型之间的转换，在Spring里其实就是把配置文件中的String转为其它类型，从3.0开始出现，目的和jdk的PropertyEditor接口是一样的，参考ConfigurableBeanFactory.setConversionService注释:</p>\n<blockquote>\n<blockquote>\n<p>Specify a Spring 3.0 ConversionService to use for converting<br>\nproperty values, as an alternative to JavaBeans PropertyEditors.<br>\n@since 3.0</p>\n</blockquote>\n</blockquote>\n<h4 id=\"stringvalueresolver\">StringValueResolver<a title=\"#stringvalueresolver\" href=\"#stringvalueresolver\"></a></h4>\n<p>用于解析注解的值。接口只定义了一个方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">resolveStringValue</span><span class=\"params\">(String strVal)</span></span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"loadtimeweaveraware\">LoadTimeWeaverAware<a title=\"#loadtimeweaveraware\" href=\"#loadtimeweaveraware\"></a></h4>\n<p>实现了此接口的bean可以得到LoadTimeWeaver，此处仅仅初始化。</p>\n<h4 id=\"初始化-1\">初始化<a title=\"#初始化-1\" href=\"#初始化-1\"></a></h4>\n<p>DefaultListableBeanFactory.preInstantiateSingletons:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preInstantiateSingletons</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; beanNames = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(<span class=\"keyword\">this</span>.beanDefinitionNames);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String beanName : beanNames) &#123;</span><br><span class=\"line\">        RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX </span><br><span class=\"line\">                    + beanName);</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isEagerInit;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span> &amp;&amp; factory <span class=\"keyword\">instanceof</span> SmartFactoryBean) &#123;</span><br><span class=\"line\">                    isEagerInit = AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Boolean&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, getAccessControlContext());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    isEagerInit = (factory <span class=\"keyword\">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class=\"line\">                            ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isEagerInit) &#123;</span><br><span class=\"line\">                    getBean(beanName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                getBean(beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String beanName : beanNames) &#123;</span><br><span class=\"line\">        Object singletonInstance = getSingleton(beanName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singletonInstance <span class=\"keyword\">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> SmartInitializingSingleton smartSingleton = </span><br><span class=\"line\">                (SmartInitializingSingleton) singletonInstance;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        smartSingleton.afterSingletonsInstantiated();</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, getAccessControlContext());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                smartSingleton.afterSingletonsInstantiated();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先进行Singleton的初始化，其中如果bean是FactoryBean类型(注意，只定义了factory-method属性的普通bean并不是FactoryBean)，并且还是SmartFactoryBean类型，那么需要判断是否需要eagerInit(isEagerInit是此接口定义的方法)。</p>\n<h1 id=\"getbean\">getBean<a title=\"#getbean\" href=\"#getbean\"></a></h1>\n<p>这里便是bean初始化的核心逻辑。源码比较复杂，分开说。以getBean(String name)为例。AbstractBeanFactory.getBean:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doGetBean(name, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二个参数表示bean的Class类型，第三个表示创建bean需要的参数，最后一个表示不需要进行类型检查。</p>\n<h2 id=\"beanname转化\">beanName转化<a title=\"#beanname转化\" href=\"#beanname转化\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> String beanName = transformedBeanName(name);</span><br></pre></td></tr></table></figure>\n<p>这里是将FactoryBean的前缀去掉以及将别名转为真实的名字。</p>\n<h2 id=\"手动注册bean检测\">手动注册bean检测<a title=\"#手动注册bean检测\" href=\"#手动注册bean检测\"></a></h2>\n<p>前面注册环境一节说过，Spring其实手动注册了一些单例bean。这一步就是检测是不是这些bean。如果是，那么再检测是不是工厂bean，如果是返回其工厂方法返回的实例，如果不是返回bean本身。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object sharedInstance = getSingleton(beanName);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (sharedInstance != <span class=\"keyword\">null</span> &amp;&amp; args == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"检查父容器\">检查父容器<a title=\"#检查父容器\" href=\"#检查父容器\"></a></h2>\n<p>如果父容器存在并且存在此bean定义，那么交由其父容器初始化:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (parentBeanFactory != <span class=\"keyword\">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Not found -&gt; check parent.</span></span><br><span class=\"line\">    <span class=\"comment\">//此方法其实是做了前面beanName转化的逆操作，因为父容器同样会进行转化操作</span></span><br><span class=\"line\">    String nameToLookup = originalBeanName(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Delegation to parent with explicit args.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// No args -&gt; delegate to standard getBean method.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"依赖初始化\">依赖初始化<a title=\"#依赖初始化\" href=\"#依赖初始化\"></a></h2>\n<p>bean可以由depends-on属性配置依赖的bean。Spring会首先初始化依赖的bean。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] dependsOn = mbd.getDependsOn();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (dependsOn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String dependsOnBean : dependsOn) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//检测是否存在循环依赖</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDependent(beanName, dependsOnBean)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">            <span class=\"string\">\"Circular depends-on relationship between '\"</span> + beanName + <span class=\"string\">\"' and '\"</span> + dependsOnBean + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        registerDependentBean(dependsOnBean, beanName);</span><br><span class=\"line\">        getBean(dependsOnBean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>registerDependentBean进行了依赖关系的注册，这么做的原因是Spring在即进行bean销毁的时候会首先销毁被依赖的bean。依赖关系的保存是通过一个ConcurrentHashMap&lt;String, Set<String>&gt;完成的，key是bean的真实名字。</p>\n<h2 id=\"singleton初始化-1\">Singleton初始化<a title=\"#singleton初始化-1\" href=\"#singleton初始化-1\"></a></h2>\n<p>虽然这里大纲是Singleton初始化，但是getBean方法本身是包括所有scope的初始化，在这里一次说明了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (mbd.isSingleton()) &#123;</span><br><span class=\"line\">    sharedInstance = getSingleton(beanName, <span class=\"keyword\">new</span> ObjectFactory&lt;Object&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> createBean(beanName, mbd, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"getsingleton方法\">getSingleton方法<a title=\"#getsingleton方法\" href=\"#getsingleton方法\"></a></h3>\n<h4 id=\"是否存在\">是否存在<a title=\"#是否存在\" href=\"#是否存在\"></a></h4>\n<p>首先会检测是否已经存在，如果存在，直接返回:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">    Object singletonObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有的单例bean都保存在这样的数据结构中: <code>ConcurrentHashMap&lt;String, Object&gt;</code>。</p>\n<h4 id=\"bean创建\">bean创建<a title=\"#bean创建\" href=\"#bean创建\"></a></h4>\n<p>源码位于AbstractAutowireCapableBeanFactory.createBean，主要分为几个部分:</p>\n<h5 id=\"lookup-method检测\">lookup-method检测<a title=\"#lookup-method检测\" href=\"#lookup-method检测\"></a></h5>\n<p>此部分用于检测lookup-method标签配置的方法是否存在:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RootBeanDefinition mbdToUse = mbd;</span><br><span class=\"line\">mbdToUse.prepareMethodOverrides();</span><br></pre></td></tr></table></figure>\n<p>prepareMethodOverrides:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareMethodOverrides</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeanDefinitionValidationException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Check that lookup methods exists.</span></span><br><span class=\"line\">    MethodOverrides methodOverrides = getMethodOverrides();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!methodOverrides.isEmpty()) &#123;</span><br><span class=\"line\">        Set&lt;MethodOverride&gt; overrides = methodOverrides.getOverrides();</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (overrides) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (MethodOverride mo : overrides) &#123;</span><br><span class=\"line\">                prepareMethodOverride(mo);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>prepareMethodOverride:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareMethodOverride</span><span class=\"params\">(MethodOverride mo)</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionValidationException(</span><br><span class=\"line\">                <span class=\"string\">\"Invalid method override: no method with name '\"</span> + mo.getMethodName() +</span><br><span class=\"line\">                <span class=\"string\">\"' on class [\"</span> + getBeanClassName() + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Mark override as not overloaded, to avoid the overhead of arg type checking.</span></span><br><span class=\"line\">        mo.setOverloaded(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"instantiationawarebeanpostprocessor触发\">InstantiationAwareBeanPostProcessor触发<a title=\"#instantiationawarebeanpostprocessor触发\" href=\"#instantiationawarebeanpostprocessor触发\"></a></h5>\n<p>在这里触发的是其postProcessBeforeInitialization和postProcessAfterInstantiation方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (bean != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class=\"line\"><span class=\"keyword\">return</span> beanInstance;</span><br></pre></td></tr></table></figure>\n<p>继续:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">resolveBeforeInstantiation</span><span class=\"params\">(String beanName, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class=\"line\">    Object bean = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Make sure bean class is actually resolved at this point.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (bean != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mbd.beforeInstantiationResolved = (bean != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这里可以看出，<strong>如果InstantiationAwareBeanPostProcessor返回的不是空，那么将不会继续执行剩下的Spring初始化流程，此接口用于初始化自定义的bean，主要是在Spring内部使用</strong>。</p>\n<h5 id=\"docreatebean\">doCreateBean<a title=\"#docreatebean\" href=\"#docreatebean\"></a></h5>\n<p>同样分为几部分。</p>\n<h6 id=\"创建(createbeaninstance)\">创建(createBeanInstance)<a title=\"#创建(createbeaninstance)\" href=\"#创建(createbeaninstance)\"></a></h6>\n<p>关键代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BeanWrapper instanceWrapper = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (instanceWrapper == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>createBeanInstance的创建过程又分为以下几种情况:</p>\n<ul>\n<li>\n<p>工厂bean:</p>\n<p>调用instantiateUsingFactoryMethod方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> BeanWrapper <span class=\"title\">instantiateUsingFactoryMethod</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  String beanName, RootBeanDefinition mbd, Object[] explicitArgs)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConstructorResolver(<span class=\"keyword\">this</span>).instantiateUsingFactoryMethod(beanName, mbd, explicitArgs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，此处的工厂bean指的是配置了factory-bean/factory-method属性的bean，不是实现了FacrotyBean接口的bean。如果没有配置factory-bean属性，那么factory-method指向的方法必须是静态的。此方法主要做了这么几件事:</p>\n<ul>\n<li>\n<p>初始化一个BeanWrapperImpl对象。</p>\n</li>\n<li>\n<p>根据设置的参数列表使用反射的方法寻找相应的方法对象。</p>\n</li>\n<li>\n<p>InstantiationStrategy:</p>\n<p>bean的初始化在此处又抽成了策略模式，类图:</p>\n<p><img src=\"images/InstantiationStrategy.jpg\" alt=\"InstantiationStrategy类图\" class=\"φcx\"></p>\n<p>instantiateUsingFactoryMethod部分源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanInstance = <span class=\"keyword\">this</span>.beanFactory.getInstantiationStrategy().instantiate(</span><br><span class=\"line\">    mbd, beanName, <span class=\"keyword\">this</span>.beanFactory, factoryBean, factoryMethodToUse, argsToUse);</span><br></pre></td></tr></table></figure>\n<p>getInstantiationStrategy返回的是CglibSubclassingInstantiationStrategy对象。此处instantiate实现也很简单，就是调用工厂方法的Method对象反射调用其invoke即可得到对象，SimpleInstantiationStrategy.</p>\n<p>instantiate核心源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">instantiate</span><span class=\"params\">(RootBeanDefinition bd, String beanName, BeanFactory owner,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    Object factoryBean, <span class=\"keyword\">final</span> Method factoryMethod, Object... args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> factoryMethod.invoke(factoryBean, args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>构造器自动装配</p>\n<p>createBeanInstance部分源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Need to determine the constructor...</span></span><br><span class=\"line\">Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ctors != <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">  mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class=\"line\">    <span class=\"comment\">//配置了&lt;constructor-arg&gt;子元素</span></span><br><span class=\"line\">  mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>determineConstructorsFromBeanPostProcessors源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Constructor&lt;?&gt;[] determineConstructorsFromBeanPostProcessors(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (beanClass != <span class=\"keyword\">null</span> &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (bp <span class=\"keyword\">instanceof</span> SmartInstantiationAwareBeanPostProcessor) &#123;</span><br><span class=\"line\">              SmartInstantiationAwareBeanPostProcessor ibp = </span><br><span class=\"line\">                  (SmartInstantiationAwareBeanPostProcessor) bp;</span><br><span class=\"line\">              Constructor&lt;?&gt;[] ctors = ibp.determineCandidateConstructors(beanClass, beanName);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (ctors != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> ctors;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见是由SmartInstantiationAwareBeanPostProcessor决定的，默认是没有配置这种东西的。</p>\n<p>之后就是判断bean的自动装配模式，可以通过如下方式配置:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"student\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"base.Student\"</span> <span class=\"attr\">primary</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">autowire</span>=<span class=\"string\">\"default\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>autowire共有以下几种选项:</p>\n<ul>\n<li>no: 默认的，不进行自动装配。在这种情况下，只能通过ref方式引用其它bean。</li>\n<li>byName: 根据bean里面属性的名字在BeanFactory中进行查找并装配。</li>\n<li>byType: 按类型。</li>\n<li>constructor: 以byType的方式查找bean的构造参数列表。</li>\n<li>default: 由父bean决定。</li>\n</ul>\n<p>参考: <a href=\"http://www.cnblogs.com/ViviChan/p/4981539.html\" target=\"_blank\">Spring - bean的autowire属性(自动装配)</a></p>\n<p>autowireConstructor调用的是ConstructorResolver.autowireConstructor，此方法主要做了两件事:</p>\n<ul>\n<li>\n<p>得到合适的构造器对象。</p>\n</li>\n<li>\n<p>根据构造器参数的类型去BeanFactory查找相应的bean:</p>\n<p>入口方法在ConstructorResolver.resolveAutowiredArgument:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">resolveAutowiredArgument</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        MethodParameter param, String beanName, Set&lt;String&gt; autowiredBeanNames, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TypeConverter typeConverter)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.beanFactory.resolveDependency(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> DependencyDescriptor(param, <span class=\"keyword\">true</span>), beanName, </span><br><span class=\"line\">            autowiredBeanNames, typeConverter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最终调用的还是CglibSubclassingInstantiationStrategy.instantiate方法，关键源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">instantiate</span><span class=\"params\">(RootBeanDefinition bd, String beanName, BeanFactory owner,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">final</span> Constructor&lt;?&gt; ctor, Object... args)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bd.getMethodOverrides().isEmpty()) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//反射调用</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> BeanUtils.instantiateClass(ctor, args);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instantiateWithMethodInjection(bd, beanName, owner, ctor, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，如果配置了lookup-method标签，<strong>得到的实际上是用Cglib生成的目标类的代理子类</strong>。</p>\n<p>CglibSubclassingInstantiationStrategy.instantiateWithMethodInjection:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">instantiateWithMethodInjection</span><span class=\"params\">(RootBeanDefinition bd, String beanName, BeanFactory \towner,Constructor&lt;?&gt; ctor, Object... args)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Must generate CGLIB subclass...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CglibSubclassCreator(bd, owner).instantiate(ctor, args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>默认构造器</p>\n<p>一行代码，很简单:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// No special handling: simply use no-arg constructor.</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> instantiateBean(beanName, mbd);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"mergedbeandefinitionpostprocessor\">MergedBeanDefinitionPostProcessor<a title=\"#mergedbeandefinitionpostprocessor\" href=\"#mergedbeandefinitionpostprocessor\"></a></h6>\n<p>触发源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mbd.postProcessed) &#123;</span><br><span class=\"line\">        applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class=\"line\">        mbd.postProcessed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此接口也是Spring内部使用的，不管它了。</p>\n<h6 id=\"属性解析\">属性解析<a title=\"#属性解析\" href=\"#属性解析\"></a></h6>\n<p>入口方法: AbstractAutowireCapableBeanFactory.populateBean，它的作用是: 根据autowire类型进行autowire by name，by type 或者是直接进行设置，简略后的源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">populateBean</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, BeanWrapper bw)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//所有&lt;property&gt;的值</span></span><br><span class=\"line\">    PropertyValues pvs = mbd.getPropertyValues();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class=\"line\">            mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class=\"line\">        MutablePropertyValues newPvs = <span class=\"keyword\">new</span> MutablePropertyValues(pvs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Add property values based on autowire by name if applicable.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class=\"line\">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Add property values based on autowire by type if applicable.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class=\"line\">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        pvs = newPvs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//设值</span></span><br><span class=\"line\">    applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>autowireByName源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">autowireByName</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//返回所有引用(ref=\"XXX\")的bean名称</span></span><br><span class=\"line\">    String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String propertyName : propertyNames) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (containsBean(propertyName)) &#123;</span><br><span class=\"line\">             <span class=\"comment\">//从BeanFactory获取</span></span><br><span class=\"line\">            Object bean = getBean(propertyName);</span><br><span class=\"line\">            pvs.add(propertyName, bean);</span><br><span class=\"line\">            registerDependentBean(propertyName, beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>autowireByType也是同样的套路，所以可以得出结论: <strong>autowireByName和autowireByType方法只是先获取到引用的bean，真正的设值是在applyPropertyValues中进行的。</strong></p>\n<h6 id=\"属性设置\">属性设置<a title=\"#属性设置\" href=\"#属性设置\"></a></h6>\n<p>Spring判断一个属性可不可以被设置(存不存在)是通过java bean的内省操作来完成的，也就是说，属性可以被设置的条件是<strong>此属性拥有public的setter方法，并且注入时的属性名应该是setter的名字</strong>。</p>\n<h6 id=\"初始化-2\">初始化<a title=\"#初始化-2\" href=\"#初始化-2\"></a></h6>\n<p>此处的初始化指的是bean已经构造完成，执行诸如调用其init方法的操作。相关源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Initialize the bean instance.</span></span><br><span class=\"line\">Object exposedObject = bean;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    populateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exposedObject != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>initializeBean:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">initializeBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> Object bean, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, getAccessControlContext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object wrappedBean = bean;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrappedBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要的操作步骤一目了然。</p>\n<ul>\n<li>\n<p>Aware方法触发:</p>\n<p>我们的bean有可能实现了一些XXXAware接口，此处就是负责调用它们:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAwareMethods</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> Object bean)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> Aware) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> BeanNameAware) &#123;</span><br><span class=\"line\">          ((BeanNameAware) bean).setBeanName(beanName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> BeanClassLoaderAware) &#123;</span><br><span class=\"line\">          ((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> BeanFactoryAware) &#123;</span><br><span class=\"line\">          ((BeanFactoryAware) bean).setBeanFactory(AbstractAutowireCapableBeanFactory.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>BeanPostProcessor触发，没什么好说的</p>\n</li>\n<li>\n<p>调用init方法:</p>\n<p>在XML配置中，bean可以有一个init-method属性来指定初始化时调用的方法。从原理来说，其实就是一个反射调用。不过注意这里有一个InitializingBean的概念。</p>\n<p>此接口只有一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n<p>如果我们的bean实现了此接口，那么此方法会首先被调用。此接口的意义在于: 当此bean的所有属性都被设置(注入)后，给bean一个利用现有属性重新组织或是检查属性的机会。感觉和init方法有些冲突，不过此接口在Spring被广泛使用。</p>\n</li>\n</ul>\n<h3 id=\"getobjectforbeaninstance\">getObjectForBeanInstance<a title=\"#getobjectforbeaninstance\" href=\"#getobjectforbeaninstance\"></a></h3>\n<p>位于AbstractBeanFactory，此方法的目的在于如果bean是FactoryBean，那么返回其工厂方法创建的bean，而不是自身。</p>\n<h2 id=\"prototype初始化\">Prototype初始化<a title=\"#prototype初始化\" href=\"#prototype初始化\"></a></h2>\n<p>AbstractBeanFactory.doGetBean相关源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mbd.isPrototype()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// It's a prototype -&gt; create a new instance.</span></span><br><span class=\"line\">    Object prototypeInstance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        beforePrototypeCreation(beanName);</span><br><span class=\"line\">        prototypeInstance = createBean(beanName, mbd, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        afterPrototypeCreation(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"beforeprototypecreation\">beforePrototypeCreation<a title=\"#beforeprototypecreation\" href=\"#beforeprototypecreation\"></a></h3>\n<p>此方法用于确保在同一时刻只能有一个此bean在初始化。</p>\n<h3 id=\"createbean\">createBean<a title=\"#createbean\" href=\"#createbean\"></a></h3>\n<p>和单例的是一样的，不在赘述。</p>\n<h3 id=\"afterprototypecreation\">afterPrototypeCreation<a title=\"#afterprototypecreation\" href=\"#afterprototypecreation\"></a></h3>\n<p>和beforePrototypeCreation对应的，你懂的。</p>\n<h3 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h3>\n<p>可以看出，初始化其实和单例是一样的，只不过单例多了一个是否已经存在的检查。</p>\n<h2 id=\"其它scope初始化\">其它Scope初始化<a title=\"#其它scope初始化\" href=\"#其它scope初始化\"></a></h2>\n<p>其它就指的是request、session。此部分源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    String scopeName = mbd.getScope();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Scope scope = <span class=\"keyword\">this</span>.scopes.get(scopeName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (scope == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"No Scope registered for scope name '\"</span> + scopeName + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Object scopedInstance = scope.get(beanName, <span class=\"keyword\">new</span> ObjectFactory&lt;Object&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">            beforePrototypeCreation(beanName);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> createBean(beanName, mbd, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                afterPrototypeCreation(beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scopes是一个LinkedHashMap&lt;String, Scope&gt;，可以调用 ConfigurableBeanFactory定义的registerScope方法注册其值。</p>\n<p>Scope接口继承体系:</p>\n<p><img src=\"images/Scope.jpg\" alt=\"Scope继承体系\" class=\"φcx\"></p>\n<p>根据socpe.get的注释，此方法如果找到了叫做beanName的bean，那么返回，如果没有，将调用ObjectFactory创建之。Scope的实现参考类图。</p>\n","prev":{"title":"计算机网络","link":"2020/12/04/计算机网络"},"next":{"title":"my new post","link":"2020/04/23/my-new-post"},"plink":"https://lingxizz.github.io/2020/12/04/Spring/","toc":[{"id":"基本","title":"基本","index":"1","children":[{"id":"classpathxmlapplicationcontext","title":"ClassPathXmlApplicationContext","index":"1.1","children":[{"id":"构造器","title":"构造器","index":"1.1.1"},{"id":"设置配置文件路径","title":"设置配置文件路径","index":"1.1.2"}]},{"id":"refresh","title":"refresh","index":"1.2","children":[{"id":"preparerefresh","title":"prepareRefresh","index":"1.2.1"},{"id":"beanfactory创建","title":"BeanFactory创建","index":"1.2.2"},{"id":"preparebeanfactory","title":"prepareBeanFactory","index":"1.2.3"},{"id":"postprocessbeanfactory","title":"postProcessBeanFactory","index":"1.2.4"},{"id":"invokebeanfactorypostprocessors","title":"invokeBeanFactoryPostProcessors","index":"1.2.5"},{"id":"beanpostprocessor注册","title":"BeanPostProcessor注册","index":"1.2.6"},{"id":"messagesource","title":"MessageSource","index":"1.2.7"},{"id":"事件驱动","title":"事件驱动","index":"1.2.8"},{"id":"onrefresh","title":"onRefresh","index":"1.2.9"},{"id":"applicationlistener注册","title":"ApplicationListener注册","index":"1.2.10"},{"id":"singleton初始化","title":"singleton初始化","index":"1.2.11"}]}]},{"id":"getbean","title":"getBean","index":"2","children":[{"id":"beanname转化","title":"beanName转化","index":"2.1"},{"id":"手动注册bean检测","title":"手动注册bean检测","index":"2.2"},{"id":"检查父容器","title":"检查父容器","index":"2.3"},{"id":"依赖初始化","title":"依赖初始化","index":"2.4"},{"id":"singleton初始化-1","title":"Singleton初始化","index":"2.5","children":[{"id":"getsingleton方法","title":"getSingleton方法","index":"2.5.1"},{"id":"getobjectforbeaninstance","title":"getObjectForBeanInstance","index":"2.5.2"}]},{"id":"prototype初始化","title":"Prototype初始化","index":"2.6","children":[{"id":"beforeprototypecreation","title":"beforePrototypeCreation","index":"2.6.1"},{"id":"createbean","title":"createBean","index":"2.6.2"},{"id":"afterprototypecreation","title":"afterPrototypeCreation","index":"2.6.3"},{"id":"总结","title":"总结","index":"2.6.4"}]},{"id":"其它scope初始化","title":"其它Scope初始化","index":"2.7"}]}],"copyright":{"author":"lingxii","link":"<a href=\"https://lingxizz.github.io/2020/12/04/Spring/\" title=\"Spring\">https://lingxizz.github.io/2020/12/04/Spring/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}